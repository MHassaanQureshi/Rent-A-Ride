"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import { redirect, useRouter } from "next/navigation";
import Signout from "@/app/components/SignOut";
import vehicle from "@/models/vehicle";
import DashboardNav from "@/app/components/DashboardNav";

interface VehicleType {
  _id: string;
  name: string;
  model: string;
  fuel_type: string;
  color: string;
  availability: string;
  description: string;
  price: number;
  image: string[];
  fromavailabilityDate: string;
  toavailabilityDate: string;
}

interface BookingType {
  _id: string;
  name: string;
  email: string;
  phone: string;
  address: string;
  vehicle_id: string;
  startDate: string;
  endDate: string;
  location: string;
  totalprice: number;
  paymentmethod: string;
  Delivery_status: string;
  vehicle_name:string,
}

export default function Provider() {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  const [loading, setLoading] = useState(true);
  const [vehicles, setVehicles] = useState<VehicleType[]>([]);
  const [bookings, setBookings] = useState<BookingType[]>([]);
  const [bookingsreceived, setBookingsreceived] = useState<BookingType[]>([]);
  const [user, setUser] = useState<any>(null);
  

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/auth/login");
    }
  }, [status, router]);
{/*fetching user API call*/}
  useEffect(() => {
    const fetchUser = async () => {
      const res = await fetch("/api/user/my");
      const data = await res.json();
      setUser(data);
    };
    if (status === "authenticated") {
      fetchUser();
    }
  }, [status]);

  {/*fetching vehicle API call*/}
  useEffect(() => {
    const fetchVehicles = async () => {
      const res = await fetch("/api/vehicles/my");
      const data = await res.json();
      setVehicles(data);
    };
    if (status === "authenticated" && session?.user?.role === "provider") {
      fetchVehicles();
    }
  }, [status, session]);

  useEffect(() => {
    const fetchBookings = async () => {
      const res = await fetch("/api/bookings/my");
      if (!res.ok) return;
      const data = await res.json();
      setBookings(data);
    };
   
      fetchBookings();
    
  }, []);
{/* Fetching details of received bookings to provider*/}
  useEffect(() => {
    const fetchBookingsreceived = async () => {
      const res = await fetch("/api/bookings/byid");
      if (!res.ok) return;
      const data = await res.json();
      setBookingsreceived(data);
    };
   
      fetchBookingsreceived();
      
      setLoading(false);
    
    
  }, []);


{/*delete vehicle API call*/}
  const deleteVehicle = async(id:string)=>{
    try{
    const data = await fetch(`/api/vehicles/delete/${id}`,{
      method:"DELETE"
    });
    if(data.ok){
        alert("vehicle deleted")
      
        
    }
    if(!data.ok){
        alert("vehicle not deleted")
        
    }
  }
    catch(e){
      alert(`failed to delete user ${e}`)
    }
   }

  {/*Update vehicle API call*/}
  const updateVehicleStatus = async(id:string,status:string)=>{
    
    try{
    const data = await fetch(`/api/bookings/update/${id}`,{
      method:"POST",
      headers:{
        "Content-Type": "application/json"
      },
      body: JSON.stringify({id,status})
    });
    if(data.ok){
        alert("Booking updated")
        router.push("/dashboard/provider")
      
        
    }
    if(!data.ok){
        alert("Booking not updated")
        
    }
  }
    catch(e){
      alert(`failed to update Booking ${e}`)
    }
   }
   {/*Formatting Date*/}
 const formatDate = (dateString: string) =>
    new Date(dateString).toLocaleDateString();

  if (status === "loading") {
    return <div className="text-center text-white mt-10">Loading...</div>;
  }
 if(session?.user.role === "user") redirect("/dashboard/user")

  return (
    <>
   <div className="w-[100%] flex flex-row ">
     <span className="w-[30%]">
             <DashboardNav />
           </span>
    <span className="w-[60%]">
      <div className="w-full flex flex-col items-center mt-16">
    {/* Mapping the Fetched details of received bookings */}
          <div className="flex flex-col items-center mt-16" >
      <h2 className="text-2xl text-black mb-4">Bookings You Have Received</h2>

      <div className="flex flex-col gap-4 text-white" id="receive">
        
          <table
            className="w-full bg-gray-800 rounded-md overflow-hidden p-5"
          >
            <thead>
              <tr>
                <th className="p-4 border border-gray-700">Name</th>
                <th className="p-4 border border-gray-700">Email</th>
                <th className="p-4 border border-gray-700">Address</th>
                <th className="p-4 border border-gray-700">Phone</th>
                <th className="p-4 border border-gray-700">Start Date</th>
                <th className="p-4 border border-gray-700">End Date</th>
                <th className="p-4 border border-gray-700">Vehicle Name</th>
                <th className="p-4 border border-gray-700">Total Amount</th>
                <th className="p-4 border border-gray-700">Delivery Status</th>
              </tr>
            </thead>
            {bookingsreceived.map((booking) => (
            <tbody
             key={booking._id} className="gap-4 p-4">
              <tr>
                <td className="p-4 border border-gray-700">{booking.name}</td>
                <td className="p-4 border border-gray-700">{booking.email}</td>
                <td className="p-4 border border-gray-700">{booking.address}</td>
                <td className="p-4 border border-gray-700">{booking.phone}</td>
                <td className="p-4 border border-gray-700">
                  {formatDate(booking.startDate)}
                </td>
                <td className="p-2 border border-gray-700">
                  {formatDate(booking.endDate)}
                </td>
                <td className="p-2 border border-gray-700">{booking.vehicle_name}</td>
                <td className="p-2 border border-gray-700">{booking.totalprice}</td>
                <td className="p-2 border border-gray-700">{booking.Delivery_status}</td>
                <td className="gap-3 flex items-center justify-center "> <button className="bg-green-400 text-white p-1 rounded cursor-pointer  disabled:bg-gray-400 disabled:cursor-not-allowed" onClick={()=>{
                  updateVehicleStatus(booking._id, "Accepted Waiting for Delivery")}} disabled={booking.Delivery_status === "Cancelled" || booking.Delivery_status === "Accepted Waiting for Delivery" || booking.Delivery_status === "received"}>Accept</button>
                <button className="bg-red-600 text-white p-1 rounded disabled:bg-gray-400 disabled:cursor-not-allowed" onClick={()=>{
                 updateVehicleStatus(booking._id, `Cancelled`)
                }} disabled={booking.Delivery_status === "Cancelled" || booking.Delivery_status === "received"}>Reject</button></td>
               
              </tr>
            </tbody>
            ))}
          </table>
       
      </div>
    </div>
        
      </div>
     

      
     <div className="flex flex-col items-center mt-16">
      <h2 className="text-2xl text-black mb-4">Your Bookings</h2>

      <div className="flex flex-col gap-4 text-white" id="bookings">
        {/* Mapping the Fetched details of  bookings  made by user*/}
          <table
            className="w-full bg-gray-800 rounded-md overflow-hidden p-5"
          >
            <thead>
              <tr>
                <th className="p-4 border border-gray-700">Name</th>
                <th className="p-4 border border-gray-700">Email</th>
                <th className="p-4 border border-gray-700">Address</th>
                <th className="p-4 border border-gray-700">Phone</th>
                <th className="p-4 border border-gray-700">Start Date</th>
                <th className="p-4 border border-gray-700">End Date</th>
                <th className="p-4 border border-gray-700">Vehicle Name</th>
                <th className="p-4 border border-gray-700">Delivery Status</th>
              </tr>
            </thead>
            {bookings.map((booking) => (
            <tbody
             key={booking._id} className="gap-4 p-4">
              <tr>
                <td className="p-4 border border-gray-700">{booking.name}</td>
                <td className="p-4 border border-gray-700">{booking.email}</td>
                <td className="p-4 border border-gray-700">{booking.address}</td>
                <td className="p-4 border border-gray-700">{booking.phone}</td>
                <td className="p-4 border border-gray-700">
                  {formatDate(booking.startDate)}
                </td>
                <td className="p-2 border border-gray-700">
                  {formatDate(booking.endDate)}
                </td>
                <td className="p-2 border border-gray-700">{booking.vehicle_name}</td>
                <td className="p-2 border border-gray-700">{booking.Delivery_status}</td>
                <td className="gap-3 flex items-center justify-centeralign-middle mt-2  "> <button className="bg-red-600 text-white p-1 rounded  disabled:bg-gray-400 disabled:cursor-not-allowed" onClick={()=>{
                 updateVehicleStatus(booking._id, `Cancelled by ${booking.name}`)}}disabled={booking.Delivery_status === "Cancelled" || booking.Delivery_status === "received"}>Cancel</button>
                <button className="bg-green-400 text-white p-1 rounded disabled:bg-gray-400 disabled:cursor-not-allowed" onClick={()=>{
                  updateVehicleStatus(booking._id,"received");
                }}disabled={booking.Delivery_status === "Cancelled" || booking.Delivery_status === "received"}>Received</button></td>
               
              </tr>
            </tbody>
            ))}
          </table>
       
      </div>
    </div>
     {/* Mapping the Fetched details of vehicles based on role */}
       {session?.user?.role === "provider" && (
       <div className="flex flex-col items-center mt-16" >
      <h2 className="text-2xl text-black mb-4">Your Vehicles</h2>

      <div className="flex flex-col gap-4 text-white" id="vehicle">
        
          <table
            className="w-full bg-gray-800 rounded-md overflow-hidden p-5"
          >
            <thead>
              <tr>
                <th className="p-4 border border-gray-700">Name</th>
                <th className="p-4 border border-gray-700">Model</th>
                <th className="p-4 border border-gray-700">Price</th>
                <th className="p-4 border border-gray-700">Color</th>
                <th className="p-4 border border-gray-700">Start Date</th>
                <th className="p-4 border border-gray-700">End Date</th>
                <th className="p-4 border border-gray-700">Availability</th>
                <th className="p-4 border border-gray-700">Fuel Type</th>
              </tr>
            </thead>
            {vehicles.map((vehicle) => (
            <tbody
             key={vehicle._id} className="gap-4 p-4">
              <tr>
                <td className="p-4 border border-gray-700">{vehicle.name}</td>
                <td className="p-4 border border-gray-700">{vehicle.model}</td>
                <td className="p-4 border border-gray-700">{vehicle.price}</td>
                <td className="p-4 border border-gray-700">{vehicle.color}</td>
                <td className="p-4 border border-gray-700">
                  {formatDate(vehicle.fromavailabilityDate)}
                </td>
                <td className="p-2 border border-gray-700">
                  {formatDate(vehicle.toavailabilityDate)}
                </td>
                <td className="p-2 border border-gray-700">{vehicle.availability}</td>
                <td className="p-2 border border-gray-700">{vehicle.fuel_type}</td>
                <td className="gap-3 flex items-center justify-center align-middle mt-2 "> <button className="bg-blue-500 text-white p-1 rounded"><Link href={`/editvehicle/${vehicle._id}`}>Update</Link></button>
                <button className="bg-red-600 text-white p-1 rounded " onClick={()=>{
                  deleteVehicle(vehicle._id)
                }}>Delete</button></td>
               
              </tr>
            </tbody>
            ))}
          </table>
       
      </div>
    </div>
      )}
    </span>
   </div>
    </>
  );
}
